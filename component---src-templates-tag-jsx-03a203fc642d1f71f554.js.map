{"version":3,"sources":["webpack:///component---src-templates-tag-jsx-03a203fc642d1f71f554.js","webpack:///./src/templates/tag.jsx","webpack:///./src/utils/utils.js"],"names":["webpackJsonp","215","module","exports","__webpack_require__","_interopRequireDefault","obj","__esModule","default","Template","_ref","data","posts","edges","allPostTags","tags","getAllTags","allPosts","forEach","_ref2","post","node","frontmatter","tag","unpublished","includes","push","_react2","createElement","className","map","_ref3","_gatsbyLink2","to","path","style","textDecoration","key","id","title","date","_utils","formatPostTags","excerpt","pageQuery","undefined","_react","_gatsbyLink","39","TAG_SEPERATOR","newTags","sort","a","b","el","charAt","toUpperCase","substring","join"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,EAASC,GAEhC,YAgBA,SAASC,GAAuBC,GAAO,MAAOA,IAAOA,EAAIC,WAAaD,GAAQE,QAASF,GChBzE,QAASG,GAATC,GAA4B,GAARC,GAAQD,EAARC,KAClBC,EAAUD,EAAKC,MAAtBC,MACFC,EAAcH,EAAKI,KAEnBA,KAEAC,EAAa,SAAAC,GACjBA,EAASJ,MAAMK,QAAQ,SAAAC,GAAoB,GAAXC,GAAWD,EAAjBE,IACxBD,GAAKE,YAAYP,KAAKG,QAAQ,SAAAK,GACxBH,EAAKE,YAAYE,aAChBT,EAAKU,SAASF,IACjBR,EAAKW,KAAKH,OAQlB,OAFAP,GAAWF,GAGTa,EAAAnB,QAAAoB,cAAA,OAAKC,UAAU,cACZjB,EAAMkB,IAAI,SAAAC,GAAA,GAASX,GAATW,EAAGV,IAAH,OACTM,GAAAnB,QAAAoB,cAACI,EAAAxB,SACCyB,GAAIb,EAAKE,YAAYY,KACrBC,OACEC,eAAgB,QAElBC,IAAKjB,EAAKL,KAAOK,EAAKkB,IAEtBX,EAAAnB,QAAAoB,cAAA,OAAKC,UAAU,oBAAoBQ,IAAKjB,EAAKL,KAAOK,EAAKkB,IACvDX,EAAAnB,QAAAoB,cAAA,MAAIC,UAAU,2BACXT,EAAKE,YAAYiB,OAEpBZ,EAAAnB,QAAAoB,cAAA,MAAIC,UAAU,0BACXT,EAAKE,YAAYkB,KAClBb,EAAAnB,QAAAoB,cAAA,QAAMC,UAAU,mBACb,EAAAY,EAAAC,gBAAetB,EAAKE,YAAYP,QAGrCY,EAAAnB,QAAAoB,cAAA,KAAGC,UAAU,6BAA6BT,EAAKuB,cDrC1DxC,EAAQI,YAAa,EACrBJ,EAAQyC,UAAYC,OACpB1C,EAAQK,QCJeC,CALxB,IAAAqC,GAAA1C,EAAA,GDaKuB,EAAUtB,EAAuByC,GCZtCC,EAAA3C,EAAA,IDgBK4B,EAAe3B,EAAuB0C,GCd3CN,EAAArC,EAAA,GAiDawC,iDDyCPI,GACA,SAAU9C,EAAQC,GAEvB,YAEAA,GAAQI,YAAa,CElGtB,IAAM0C,GAAgB,KAEhBP,EAAiB,SAAA3B,GACrB,GAAImC,GAAUnC,EAAKoC,KAAK,SAACC,EAAGC,GAC1B,MAAID,GAAIC,EAAU,EACTA,EAAID,GAAU,EAChB,GAYT,OAVAF,GAAUA,EAAQpB,IAAI,SAAAwB,GACpB,OAAQA,GACN,IAAK,MACH,MAAO,KACT,KAAK,OACH,MAAO,MACT,SACE,MAAOA,GAAGC,OAAO,GAAGC,cAAgBF,EAAGG,UAAU,MAGhDP,EAAQQ,KAAKT,GFqGrB9C,GAAQK,SEjGPkC,kBFoGDxC,EAAOC,QAAUA,EAAiB","file":"component---src-templates-tag-jsx-03a203fc642d1f71f554.js","sourcesContent":["webpackJsonp([183400410456155],{\n\n/***/ 215:\n/***/ (function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\texports.pageQuery = undefined;\n\texports.default = Template;\n\t\n\tvar _react = __webpack_require__(3);\n\t\n\tvar _react2 = _interopRequireDefault(_react);\n\t\n\tvar _gatsbyLink = __webpack_require__(15);\n\t\n\tvar _gatsbyLink2 = _interopRequireDefault(_gatsbyLink);\n\t\n\tvar _utils = __webpack_require__(39);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction Template(_ref) {\n\t  var data = _ref.data;\n\t  var posts = data.posts.edges; // data.markdownRemark holds our post data\n\t\n\t  var allPostTags = data.tags;\n\t\n\t  var tags = [];\n\t\n\t  var getAllTags = function getAllTags(allPosts) {\n\t    allPosts.edges.forEach(function (_ref2) {\n\t      var post = _ref2.node;\n\t\n\t      post.frontmatter.tags.forEach(function (tag) {\n\t        if (post.frontmatter.unpublished) return;\n\t        if (!tags.includes(tag)) {\n\t          tags.push(tag);\n\t        }\n\t      });\n\t    });\n\t  };\n\t\n\t  getAllTags(allPostTags);\n\t\n\t  return _react2.default.createElement(\n\t    'div',\n\t    { className: 'blog-posts' },\n\t    posts.map(function (_ref3) {\n\t      var post = _ref3.node;\n\t      return _react2.default.createElement(\n\t        _gatsbyLink2.default,\n\t        {\n\t          to: post.frontmatter.path,\n\t          style: {\n\t            textDecoration: 'none'\n\t          },\n\t          key: post.tags + post.id\n\t        },\n\t        _react2.default.createElement(\n\t          'div',\n\t          { className: 'blog-post-preview', key: post.tags + post.id },\n\t          _react2.default.createElement(\n\t            'h1',\n\t            { className: 'blog-post-preview-title' },\n\t            post.frontmatter.title\n\t          ),\n\t          _react2.default.createElement(\n\t            'h2',\n\t            { className: 'blog-post-preview-date' },\n\t            post.frontmatter.date,\n\t            _react2.default.createElement(\n\t              'span',\n\t              { className: 'blog-post-tags' },\n\t              (0, _utils.formatPostTags)(post.frontmatter.tags)\n\t            )\n\t          ),\n\t          _react2.default.createElement(\n\t            'p',\n\t            { className: 'blog-post-preview-excerpt' },\n\t            post.excerpt\n\t          )\n\t        )\n\t      );\n\t    })\n\t  );\n\t}\n\t\n\tvar pageQuery = exports.pageQuery = '** extracted graphql fragment **';\n\n/***/ }),\n\n/***/ 39:\n/***/ (function(module, exports) {\n\n\t'use strict';\n\t\n\texports.__esModule = true;\n\tvar TAG_SEPERATOR = ', ';\n\t\n\tvar formatPostTags = function formatPostTags(tags) {\n\t  var newTags = tags.sort(function (a, b) {\n\t    if (a > b) return 1;else if (b > a) return -1;\n\t    return 0;\n\t  });\n\t  newTags = newTags.map(function (el) {\n\t    switch (el) {\n\t      case 'css':\n\t        return 'CSS';\n\t      case 'sass':\n\t        return 'SASS';\n\t      default:\n\t        return el.charAt(0).toUpperCase() + el.substring(1);\n\t    }\n\t  });\n\t  return newTags.join(TAG_SEPERATOR);\n\t};\n\t\n\texports.default = {\n\t  formatPostTags: formatPostTags\n\t};\n\tmodule.exports = exports['default'];\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// component---src-templates-tag-jsx-03a203fc642d1f71f554.js","import React from 'react';\nimport Link from 'gatsby-link';\n\nimport { formatPostTags } from '../utils/utils';\n\nexport default function Template({ data }) {\n  const { edges: posts } = data.posts; // data.markdownRemark holds our post data\n  const allPostTags = data.tags;\n\n  const tags = [];\n\n  const getAllTags = allPosts => {\n    allPosts.edges.forEach(({ node: post }) => {\n      post.frontmatter.tags.forEach(tag => {\n        if (post.frontmatter.unpublished) return;\n        if (!tags.includes(tag)) {\n          tags.push(tag);\n        }\n      });\n    });\n  };\n\n  getAllTags(allPostTags);\n\n  return (\n    <div className=\"blog-posts\">\n      {posts.map(({ node: post }) => (\n        <Link\n          to={post.frontmatter.path}\n          style={{\n            textDecoration: 'none',\n          }}\n          key={post.tags + post.id}\n        >\n          <div className=\"blog-post-preview\" key={post.tags + post.id}>\n            <h1 className=\"blog-post-preview-title\">\n              {post.frontmatter.title}\n            </h1>\n            <h2 className=\"blog-post-preview-date\">\n              {post.frontmatter.date}\n              <span className=\"blog-post-tags\">\n                {formatPostTags(post.frontmatter.tags)}\n              </span>\n            </h2>\n            <p className=\"blog-post-preview-excerpt\">{post.excerpt}</p>\n          </div>\n        </Link>\n      ))}\n    </div>\n  );\n}\n\nexport const pageQuery = graphql`\n  query BlogPostByTag($tag: String!) {\n    posts: allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            tags\n          }\n        }\n      }\n    }\n    tags: allMarkdownRemark(filter: { frontmatter: { unpublished: {} } }) {\n      edges {\n        node {\n          frontmatter {\n            tags\n            unpublished\n          }\n        }\n      }\n    }\n  }\n`;\n\n\n\n// WEBPACK FOOTER //\n// ./src/templates/tag.jsx","const TAG_SEPERATOR = ', ';\n\nconst formatPostTags = tags => {\n  let newTags = tags.sort((a, b) => {\n    if (a > b) return 1;\n    else if (b > a) return -1;\n    return 0;\n  });\n  newTags = newTags.map(el => {\n    switch (el) {\n      case 'css':\n        return 'CSS';\n      case 'sass':\n        return 'SASS';\n      default:\n        return el.charAt(0).toUpperCase() + el.substring(1);\n    }\n  });\n  return newTags.join(TAG_SEPERATOR);\n};\n\nexport default {\n  formatPostTags,\n};\n\n\n\n// WEBPACK FOOTER //\n// ./src/utils/utils.js"],"sourceRoot":""}